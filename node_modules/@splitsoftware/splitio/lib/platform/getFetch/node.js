"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFetch = exports.__setFetch = void 0;
var tslib_1 = require("tslib");
/* eslint-disable compat/compat */
var https_1 = (0, tslib_1.__importDefault)(require("https"));
// @TODO
// 1- handle multiple protocols automatically
// 2- destroy it once the sdk is destroyed
var agent = new https_1.default.Agent({
    keepAlive: true,
    keepAliveMsecs: 1500
});
var nodeFetch;
try {
    nodeFetch = require('node-fetch');
    // Handle node-fetch issue https://github.com/node-fetch/node-fetch/issues/1037
    if (typeof nodeFetch !== 'function')
        nodeFetch = nodeFetch.default;
}
catch (error) {
    // Try to access global fetch if `node-fetch` package couldn't be imported (e.g., not in a Node environment)
    nodeFetch = typeof fetch === 'function' ? fetch : undefined;
}
// This function is only exposed for testing purposes.
function __setFetch(fetch) {
    nodeFetch = fetch;
}
exports.__setFetch = __setFetch;
/**
 * Retrieves 'node-fetch', a Fetch API polyfill for NodeJS, with fallback to global 'fetch' if available.
 * It passes an https agent with keepAlive enabled if URL is https.
 */
function getFetch() {
    if (nodeFetch) {
        return function (url, options) {
            return nodeFetch(url, Object.assign({ agent: url.startsWith('https:') ? agent : undefined }, options));
        };
    }
}
exports.getFetch = getFetch;
